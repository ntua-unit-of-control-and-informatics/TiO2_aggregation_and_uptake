silent = TRUE)
conc <- "high"
try(solution2 <- deSolve::ode(times = sample_time,  func = ode.func, y = inits2, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3, conc=conc, food_plan=food_plan),
silent = TRUE)
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
# Remove the data that don't follow a trend from the low concentration data
for (i in 1:dim(Concentrations_low)[2]) {
if(names(data_10)[i] == "Muscle"){
observed_1[[i]] <- data_10[,i][-2]
predicted_1[[i]] <- Concentrations_low[,i][-2] # Remove the 2nd muscle point
}else if(names(data_10)[i] == "Spleen"){
observed_1[[i]] <- data_10[,i][-c(3,4)]
predicted_1[[i]] <- Concentrations_low[,i][-c(3,4)] # remove the 3rd and 4th spleen points
}else{
observed_1[[i]] <- data_10[,i]
predicted_1[[i]] <- Concentrations_low[,i]
}
}
# Remove the data that don't follow a trend from the high concentration data
for (i in 1:dim(Concentrations_high)[2]) {
if(names(data_100)[i] == "Muscle"){
observed_2[[i]] <- data_100[,i][-c(2,4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(2,4)] # Remove the 2nd and 4th muscle point
}else if(names(data_100)[i] == "Spleen"){
observed_2[[i]] <- data_100[,i][-c(4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(4)] # remove the 4th spleen point
}else{
observed_2[[i]] <- data_100[,i]
predicted_2[[i]] <- Concentrations_high[,i]
}
}
comp_names <- c("Gill","Intestine","Liver",  "Brain","Spleen", "Muscle")
names(predicted_1) <- comp_names
names(predicted_2) <-names(predicted_1)
#discrepancy <- (fitness.metric(observed_1, predicted_1) + fitness.metric(observed_2, predicted_2))/2
discrepancy <- (AAFE(predicted_1, observed_1) + AAFE( predicted_2, observed_2))/2
}
predicted_2
observed_1
21*24
2780/1.24
2521/1.24
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/FPG.RData")
GA_results
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
GA_results <- GA::ga(type = "real", fitness = ga_fitness,
lower = rep(1,16), upper = rep(8.999999,16),
population = "gareal_Population",
selection = "gareal_lsSelection",
crossover = "gareal_laCrossover",
mutation = "gareal_raMutation",
popSize =  60, #the population size.
pcrossover = 0.85, #the probability of crossover between pairs of chromosomes.
pmutation = 0.4, #the probability of mutation in a parent chromosome
elitism = 5, #the number of best fitness individuals to survive at each generation.
maxiter = 200, #the maximum number of iterations to run before the GA search is halted.
run = 50, # the number of consecutive generations without any improvement
#in the best fitness value before the GA is stopped.
keepBest = TRUE, # best solutions at each iteration should be saved in a slot called bestSol.
parallel = (parallel::detectCores()),
monitor =plot,
seed = 8080)
GA_results
22.7/0.599
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_projectseaice.csv")
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
head(sea_ice)
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
sea_ice$year <- as.Date(sea_ice$year)
#Delete unnecessary columns
sea_ice$Source.Data <- NULL
#Change column name to lower case.
sea_ice <- sea_ice %>%
rename_with(tolower)
str(sea_ice)
#Any missing value
sum(sea_ice$missing < 0)
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
library("tidyverse")
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
sea_ice$year <- as.Date(sea_ice$year)
#Delete unnecessary columns
sea_ice$Source.Data <- NULL
#Change column name to lower case.
sea_ice <- sea_ice %>%
rename_with(tolower)
str(sea_ice)
#Any missing value
sum(sea_ice$missing < 0)
head(sea_ice)
sea_ice[which(sea_ice$hemisphere=="north"),]
test <- sea_ice
test <- sea_ice
test[which(test$hemisphere=="north"),][4]
test[which(test$hemisphere=="north"),][4] <- 0
head(test)
test <- sea_ice
test[which(test$hemisphere=="north"),][,4] <- 0
head(test)
test[,hemisphere=="north"]
levels(test)
levels(test$hemisphere)
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
test <- sea_ice
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
head(test,100)
tail(test,100)
levels(test$hemisphere)
test <- sea_ice
levels(test$hemisphere)
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library("tidyverse")
library("ggplot2")
library("plotly")
install.packages("viridis")
library("viridis")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
install.packages("hrbrthemes")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library("hrbrthemes")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test$hemisphere[1,4]
test[1,4]
sea_ice[1,4]
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
tail(test,100)
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
warnings()
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
exp(-2)
log(0.9)
log(-1.5)
exp(-1.5)
load("~/GitHub/TiO2_aggregation_and_uptake/Exposure/Combinated_fit/test_2_lbub.RData")
Chen_2019_datalist$C1_data$`TiO2-25R`
cbind(Chen_2019_datalist$C1_data$Time, Chen_2019_datalist$C1_data$`TiO2-25R`)
cbind(Fan_2016_datalist$C1_data$Time, Fan_2016_datalist$C1_data$`TiO2-T1`)
cbind(Chen_2019_datalist$C1_data$Time, Chen_2019_datalist$C2_data$`TiO2-25R`)
cbind(Fan_2016_datalist$C1_data$Time, Fan_2016_datalist$C2_data$`TiO2-T1`)
cbind(Chen_2019_datalist$C1_data$Time, Chen_2019_datalist$C3_data$`TiO2-25R`)
cbind(Fan_2016_datalist$C1_data$Time, Fan_2016_datalist$C3_data$`TiO2-T1`)
# Working directory
setwd('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Combinated_fit')
################################################################################
# Calculate the dry weight of daphnia in mg based on Pauw et al.1981 data
weight_calc <- function(age){
df <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Daphnia Magna Dry Weight - Age/weight_growth_data_Pauw_1981.csv')
df[,1] <- round(df[,1])
age_span <- df[,1]
weight_span <- df[,2]
if(age <= min(age_span)){
dry_weight <- min(weight_span)
}else if(age <= min(age_span)){
dry_weight <- max(weight_span)
}else{
index <- which.min(abs(age - age_span))
dry_weight <- weight_span[index]
}
return(dry_weight)
}
# Filtering rate of Daphnia magna is calculated based on Burns et al. 1969.
Filtration_rate_func <- function(temperature, dry_mass, dry_mass_threshold=0.034){
# UNITS
# temperature: C
# dry_mass: mg
# F_rate: ml/h/mg dry daphnia
# dry_mass_threshold is the threshold to decide if a daphnia organism should be
# considered as juvenile or adult. According to Burns et al.1969. Daphnia
# organisms with length lower than(approximately) 1.5 mm are considered as juveniles.
# Based on the given equation that relates the dry mass to the length of the
# organism in the same paper ( W (mg) = 0.0116*L^2.67 ), the dry mass
# of a daphnia with length 1.5 mm has dry mass equal to 0.034mg. So daphnia
# organism with dry mass greater than this threshold must be considered as adults
# for the calculation of F_rate.
# Keep ony the data for immature or adult daphnia based on the
# age and adulthood_threshold given.
filtration_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Daphnia Magna Filtration Rate/Burns et al.1969 filtration rate data.csv')
if (dry_mass <= dry_mass_threshold){
df <- filtration_data[,1:2]
} else{
df <- filtration_data[,c(1,3)]
}
#Interpolation
#Set the boundaries about the temperature
if(temperature <= min(df$Temperature)){
F_rate <- df[which.min(df$Temperature), 2]
}else if(temperature >= max(df$Temperature)){
F_rate <- df[which.max(df$Temperature), 2]
}else{
F_rate <- approx(df[,1], df[,2], temperature)
}
return(F_rate)
}
################################################################################
#=====================================#
# Chen et al.2019 data pre-processing #
#=====================================#
# The following dataframe is a mappin of the of the TiO2 NPs types with
# their corresponding codes (which are simple letters)
A <- c("A", "TiO2-5A")
B <- c("B", "TiO2-10A")
C <- c("C", "TiO2-100A")
D <- c("D", "TiO2-P25")
E <- c("E", "TiO2-25R")
Mapping <- data.frame(rbind(A, B, C, D, E))
colnames(Mapping) <- c("Code", "Type")
i <- 1:dim(Mapping)[2]
Mapping[,i] <- apply(Mapping[,i], 2,
function(x) as.character(x))
sapply(Mapping, class)
# Load data only for water exposure scenario
# The values are reported as mg TiO2/kg of daphnia
# Load the data for concentration = 0.1 mg/l
C1_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Chen_2019/water_exposure/data/0.1_water_exposure.csv')
colnames(C1_data)[-1] <- Mapping$Type
C1_data[,2:6] <-  C1_data[,2:6]/1e06 # transform from mg/kg daphnia to mg/mg daphnia
# Load the data for concentration = 1.0 mg/l
C2_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Chen_2019/water_exposure/data/1_water_exposure.csv')
colnames(C2_data)[-1] <- Mapping$Type
C2_data[,2:6] <-  C2_data[,2:6]/1e06 # transform from mg/kg daphnia to mg/mg daphnia
# Load the data for concentration = 10.0 mg/l
C3_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Chen_2019/water_exposure/data/10_water_exposure.csv')
colnames(C3_data)[-1] <- Mapping$Type
C3_data[,2:6] <-  C3_data[,2:6]/1e06 # transform from mg/kg daphnia to mg/mg daphnia
# The daphnias used in water exposure experiments are between 7 and 14 days old
# We consider an average age f the daphnias equal to 10 days (Pauw et al.1981)
dry_weight <- weight_calc(7) # mg dry weight of individual daphnia
# V_water is the volume of water (in L) in the corresponding experiment.
# The volume remains constant during the experiment and equal to 100 ml
V_water <- 0.1 # L
# Population of daphnias during the experiments
# At each measurement 10 daphnias were removed from the system
N <- seq(80,10,-10)
# Units of filtration rate are ml water/h/mg dry weight of daphnia
F_rate <- Filtration_rate_func(22, dry_weight)$y
# Multiply with the average dry weight (transformed into mg) of an individual.
F_rate <- F_rate*dry_weight
F_rate
#====================================#
# Fan et al.2016 data pre-processing #
#====================================#
#=================#
#  Water exposure #
#=================#
# The following dataframe is a mappin of the of the TiO2 NPs types with
# their corresponding codes (which are simple letters)
A <- c("A", "TiO2-T1")
B <- c("B", "TiO2-T2")
C <- c("C", "TiO2-H1")
D <- c("D", "TiO2-S1")
E <- c("E", "TiO2-H2")
G <- c("G", "TiO2-S2")
Mapping <- data.frame(rbind(A, B, C, D, E, G))
colnames(Mapping) <- c("Code", "Type")
i <- 1:dim(Mapping)[2]
Mapping[,i] <- apply(Mapping[,i], 2,
function(x) as.character(x))
sapply(Mapping, class)
# Load data  for water exposure - uptake phase
# The values are reported as mg TiO2/g of dry daphnia
# Time is given in minutes (the uptake experiment lasted 60 minutes)
# Load the data for concentration = 0.1 mg/l
C1_uptake_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Fan_2016/data/exposure_data/uptake/0.1_uptake.csv')
colnames(C1_uptake_data)[-1] <- Mapping$Type
C1_uptake_data[,2:7] <-  C1_uptake_data[,2:7]/1e03 # transform from mg/g daphnia to mg/mg daphnia
C1_uptake_data[,1] <- C1_uptake_data[,1]/60 # Transform time to hours
# Load the data for concentration = 1.0 mg/l
C2_uptake_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Fan_2016/data/exposure_data/uptake/1_uptake.csv')
colnames(C2_uptake_data)[-1] <- Mapping$Type
C2_uptake_data[,2:7] <-  C2_uptake_data[,2:7]/1e03 # transform from mg/kg daphnia to mg/mg daphnia
C2_uptake_data[,1] <- C2_uptake_data[,1]/60 # Transform time to hours
# Load the data for concentration = 10.0 mg/l
C3_uptake_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Fan_2016/data/exposure_data/uptake/10_uptake.csv')
colnames(C3_uptake_data)[-1] <- Mapping$Type
C3_uptake_data[,2:7] <-  C3_uptake_data[,2:7]/1e03 # transform from mg/kg daphnia to mg/mg daphnia
C3_uptake_data[,1] <- C3_uptake_data[,1]/60 # Transform time to hours
# Load data  for water exposure - depuration phase
# The values are reported as % retained after 2 hours uptake phase
# Time is given in hours (the depuration experiment lasted 24 hours after 2 hours uptake])
# Load the data for concentration = 0.1 mg/l
C1_depuration_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Fan_2016/data/exposure_data/depuration/0.1_depuration.csv')
colnames(C1_depuration_data)[-1] <- Mapping$Type
# Load the data for concentration = 1.0 mg/l
C2_depuration_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Fan_2016/data/exposure_data/depuration/1_depuration.csv')
colnames(C2_depuration_data)[-1] <- Mapping$Type
# Load the data for concentration = 10.0 mg/l
C3_depuration_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Fan_2016/data/exposure_data/depuration/10_depuration.csv')
colnames(C3_depuration_data)[-1] <- Mapping$Type
# Load the concentrations at the ending of depuration phase (units = mg TiO2/g daphnia)
final_concentrations <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Fan_2016/data/exposure_data/depuration/final_concentrations.csv')[2:7]
rownames(final_concentrations) <- c("C1", "C2", "C3")
colnames(final_concentrations) <-  Mapping$Type
final_concentrations <- final_concentrations/1e03 # transform 1 g of daphnia to 1 mg
# next i calculate the concentration of daphnia at each experiment at time_point=2 hours (C_2h)
# from C_2h = C_final/x, where x is the % percentage of final concentration to the C_2h
# Take the percentages corresponding at the end of the depuration phase
last_point <- dim(C1_depuration_data)[1]
percentages <- rbind(C1_depuration_data[last_point,2:7], C2_depuration_data[last_point,2:7], C3_depuration_data[last_point,2:7])/100
rownames(percentages) <- c("C1", "C2", "C3")
# The concentrations of daphnia at time=2h, (end of exposure)
C_2h <- final_concentrations/percentages # mg TiO2/ mg daphnia
# Now we are able to calculate the actual concentration of daphnia at each time point of depuration by multiplying
# the C1_depuration_data, C2_depuration_data and C3_depuration_data with C_2h
for (i in 2:7) {
C1_depuration_data[,i] <- C_2h[1,i-1]*C1_depuration_data[,i]/100
C2_depuration_data[,i] <- C_2h[2,i-1]*C2_depuration_data[,i]/100
C3_depuration_data[,i] <- C_2h[3,i-1]*C3_depuration_data[,i]/100
}
C1_depuration_data[,1] <- C1_depuration_data[,1] +2
C2_depuration_data[,1] <- C2_depuration_data[,1] +2
C3_depuration_data[,1] <- C3_depuration_data[,1] +2
# Concatenate the uptake and the depuration data
C1_data <- rbind(C1_uptake_data, C1_depuration_data)
C1_data[,1] <- c(0.16, 0.33, 0.67, 1.0, 2.0, 5.0, 8.0, 14.0, 26.0) # hours
C2_data <- rbind(C2_uptake_data, C2_depuration_data)
C2_data[,1] <- c(0.16, 0.33, 0.67, 1.0, 2.0, 5.0, 8.0, 14.0, 26.0) # hours
C3_data <- rbind(C3_uptake_data, C3_depuration_data)
C3_data[,1] <- c(0.16, 0.33, 0.67, 1.0, 2.0, 5.0, 8.0, 14.0, 26.0) # hours
# The daphnias used in water exposure experiments are between 7 and 14 days old
# We consider an average age f the daphnias equal to 10 days (Pauw et al.1981)
dry_weight <- weight_calc(14) # mg dry weight of individual daphnia
# V_water is the volume of water (in L) in the corresponding experiment.
# The volume remains constant during the experiment and equal to 100 ml
V_water <- 0.1 # L
# Population of daphnias during the experiments
# At each measurement 10 daphnias were removed from the system
N <- 10
# Units of filtration rate are ml water/h/mg dry weight of daphnia
F_rate <- Filtration_rate_func(22, dry_weight)$y
# Multiply with the average dry weight (transformed into mg) of an individual.
F_rate <- F_rate*dry_weight
F_rate
dry_weight
# The following dataframe is a mappin of the of the TiO2 NPs types with
# their corresponding codes (which are simple letters)
A <- c("A", "TiO2-5A")
B <- c("B", "TiO2-10A")
C <- c("C", "TiO2-100A")
D <- c("D", "TiO2-P25")
E <- c("E", "TiO2-25R")
Mapping <- data.frame(rbind(A, B, C, D, E))
colnames(Mapping) <- c("Code", "Type")
i <- 1:dim(Mapping)[2]
Mapping[,i] <- apply(Mapping[,i], 2,
function(x) as.character(x))
sapply(Mapping, class)
# Load data only for water exposure scenario
# The values are reported as mg TiO2/kg of daphnia
# Load the data for concentration = 0.1 mg/l
C1_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Chen_2019/water_exposure/data/0.1_water_exposure.csv')
colnames(C1_data)[-1] <- Mapping$Type
C1_data[,2:6] <-  C1_data[,2:6]/1e06 # transform from mg/kg daphnia to mg/mg daphnia
# Load the data for concentration = 1.0 mg/l
C2_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Chen_2019/water_exposure/data/1_water_exposure.csv')
colnames(C2_data)[-1] <- Mapping$Type
C2_data[,2:6] <-  C2_data[,2:6]/1e06 # transform from mg/kg daphnia to mg/mg daphnia
# Load the data for concentration = 10.0 mg/l
C3_data <- read.csv('C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Chen_2019/water_exposure/data/10_water_exposure.csv')
colnames(C3_data)[-1] <- Mapping$Type
C3_data[,2:6] <-  C3_data[,2:6]/1e06 # transform from mg/kg daphnia to mg/mg daphnia
# The daphnias used in water exposure experiments are between 7 and 14 days old
# We consider an average age f the daphnias equal to 10 days (Pauw et al.1981)
dry_weight <- weight_calc(7) # mg dry weight of individual daphnia
# V_water is the volume of water (in L) in the corresponding experiment.
# The volume remains constant during the experiment and equal to 100 ml
V_water <- 0.1 # L
# Population of daphnias during the experiments
# At each measurement 10 daphnias were removed from the system
N <- seq(80,10,-10)
# Units of filtration rate are ml water/h/mg dry weight of daphnia
F_rate <- Filtration_rate_func(22, dry_weight)$y
# Multiply with the average dry weight (transformed into mg) of an individual.
F_rate <- F_rate*dry_weight
dry_weight
0.033/0.1458646
0.7762693/2.109202
