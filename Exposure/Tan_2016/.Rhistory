time = refresh_moments ,
value = 0,
method = 'rep')
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
events = list(data = eventdat),
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
if(sum(solution$time %in% exp_data$Time) == dim(exp_data)[1]){
results <- solution[which(solution$time %in% exp_data$Time), 'C_daphnia']
} else{
stop(print("Length of predictions is not equal to the length of data"))
}
if(score == "rmse"){
score_E <- rmse(exp_data[,2], results)
}else if(score == "AAFE"){
score_E <- AAFE(exp_data[,2], results)
}else if (score == "PBKOF"){
score_E <- PBKOF(list(exp_data[,2]), list(results))
}
return(mean(c(score_A, score_B, score_C, score_D, score_E) ))
}
plot_func <- function(optimization, C_water_0, experiments, ksed_predicted, sedimentation = T, score = 'rmse'){
x<-optimization$solution
# Experiment A:
experiment <- 'A'
V_water = 0.7 # L
a <- x[1]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_simple[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_A <- solution[c("time", "C_daphnia")]
# Experiment B:
experiment <- 'B'
V_water = 0.4 # L
a <- x[1]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_refreshed[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
refresh_moments <- seq(12,48, 12)
eventdat <- data.frame(var = c("C_water"),
time = refresh_moments ,
value = rep(inits[1], length(refresh_moments)),
method = c(rep("rep", length(refresh_moments)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
events = list(data = eventdat),
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_B <- solution[c("time", "C_daphnia")]
# Experiment C:
experiment <- 'C'
V_water = 0.7# L
a <- x[2]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_refreshed[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_C <- solution[c("time", "C_daphnia")]
# Experiment D:
experiment <- 'D'
V_water = 0.4 # L
a <- x[2]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_refreshed[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
refresh_moments <- seq(12,48, 12)
eventdat <- data.frame(var = c("C_water"),
time = refresh_moments ,
value = rep(inits[1], length(refresh_moments)),
method = c(rep("rep", length(refresh_moments)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
events = list(data = eventdat),
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_D <- solution[c("time", "C_daphnia")]
# Experiment E:
experiment <- 'E'
V_water = 0.7 # L
a <- x[1]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- depuration_data[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
refresh_moments <- c(1)
eventdat <- data.frame(var = c("C_water"),
time = refresh_moments ,
value = 0,
method = 'rep')
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
events = list(data = eventdat),
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_E <- solution[c("time", "C_daphnia")]
strings <- c('A','B','C','D','E')
color_codes <- scales::hue_pal()(5) # to return 5 color codes
cls <- c()
for (i in 1:length(strings)) {
cls[i] <- color_codes[i]
names(cls)[i] <- strings[i]
}
library(ggplot2)
draw_plot <- ggplot()+
geom_line(data = predictions_A, aes(x=time, y=C_daphnia , color=strings[1]), size=1.7)+
geom_line(data = predictions_B, aes(x=time, y=C_daphnia , color=strings[2]), size=1.7)+
geom_line(data = predictions_C, aes(x=time, y=C_daphnia , color=strings[3]), size=1.7)+
geom_line(data = predictions_D, aes(x=time, y=C_daphnia , color=strings[4]), size=1.7)+
geom_line(data = predictions_E, aes(x=time, y=C_daphnia , color=strings[5]), size=1.7)+
#Experiment A
geom_point(data = uptake_simple, aes(x=Time, y=Low_Ca , color=strings[1]), size=5)+
#Experiment B
geom_point(data = uptake_refreshed, aes(x=Time, y=Low_Ca_refreshed , color=strings[2]), size=5)+
#Experiment C
geom_point(data = uptake_simple, aes(x=Time, y=High_Ca , color=strings[3]), size=5)+
#Experiment D
geom_point(data = uptake_refreshed, aes(x=Time, y=High_Ca_refreshed , color=strings[4]), size=5)+
#Experiment E
geom_point(data = depuration_data, aes(x=Time, y=Control , color=strings[5]), size=5)+
labs(title = 'Tan et al. (2016)',
y = "Concentration in Daphnia Magna (mg TiO2/mg daphnia)", x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22)) +
scale_color_manual("Experiments", values=cls)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
return(draw_plot)
}
################################################################################
# 2 aplhas, 1 ke, 1 c_sat, 1 n
x0 <- c(0.5, 0.5, 0.01, 0.05, 3)
lb <- c(0, 0, 0, 0.02770548, 2)
ub <- c(4, 4, 0.5, 0.4, 4)
C_water_0 <- 6.67 # mg TiO2/L
opts <- list( "algorithm" = "NLOPT_LN_SBPLX" , #"NLOPT_LN_NEWUOA"
"xtol_rel" = 1e-07,
"ftol_rel" = 1e-07,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 800,
"print_level" = 1)
optimization <- nloptr::nloptr(x0 = x0,
eval_f = obj_func,
lb	= lb,
ub = ub,
opts = opts,
C_water_0 = C_water_0,
experiments = experiments,
ksed_predicted = ksed_predicted,
sedimentation = T,
score = 'rmse')
optimization
x<-optimization$solution
# Experiment A:
experiment <- 'A'
V_water = 0.7 # L
a <- x[1]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_simple[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_A <- solution[c("time", "C_daphnia")]
# Experiment B:
experiment <- 'B'
V_water = 0.4 # L
a <- x[1]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_refreshed[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
refresh_moments <- seq(12,48, 12)
eventdat <- data.frame(var = c("C_water"),
time = refresh_moments ,
value = rep(inits[1], length(refresh_moments)),
method = c(rep("rep", length(refresh_moments)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
events = list(data = eventdat),
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_B <- solution[c("time", "C_daphnia")]
# Experiment C:
experiment <- 'C'
V_water = 0.7# L
a <- x[2]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_refreshed[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_C <- solution[c("time", "C_daphnia")]
# Experiment D:
experiment <- 'D'
V_water = 0.4 # L
a <- x[2]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- uptake_refreshed[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
refresh_moments <- seq(12,48, 12)
eventdat <- data.frame(var = c("C_water"),
time = refresh_moments ,
value = rep(inits[1], length(refresh_moments)),
method = c(rep("rep", length(refresh_moments)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
events = list(data = eventdat),
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_D <- solution[c("time", "C_daphnia")]
# Experiment E:
experiment <- 'E'
V_water = 0.7 # L
a <- x[1]
ke_2 <- x[3]
C_sat <- x[4]
n <- x[5]
age <- 7 #days
L = Size_estimation(age, temperature=23.5) #mm
dry_weight =  dry_weight_estimation(L) #mg
F_rate <- Filtration_rate_estimation(L, Temperature=23.5,  method = 'Preuss')#mL/h
exp_data <- depuration_data[,c(1,2)]
sol_times <- seq(0, 50, 0.1)
# Check the sedimentation condition
if(sedimentation){
k_sed <- ksed_predicted[2,3]
}else{
k_sed=0
}
constant_params <- c("F_rate" = F_rate, "V_water" = V_water, "dry_weight" = dry_weight,
'k_sed'= k_sed)
fitted_params <- c("a"=a, "ke_2"=ke_2, "C_sat"=C_sat, "n"=n)
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0, 'C_daphnia'=0, 'M_Daphnia_excreted'=0,
'M_sed'=0)
refresh_moments <- c(1)
eventdat <- data.frame(var = c("C_water"),
time = refresh_moments ,
value = 0,
method = 'rep')
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
method="lsodes",
events = list(data = eventdat),
rtol = 1e-3, atol = 1e-3,
experiment=experiment))
predictions_E <- solution[c("time", "C_daphnia")]
strings <- c('A','B','C','D','E')
color_codes <- scales::hue_pal()(5) # to return 5 color codes
cls <- c()
for (i in 1:length(strings)) {
cls[i] <- color_codes[i]
names(cls)[i] <- strings[i]
}
library(ggplot2)
draw_plot <- ggplot()+
geom_line(data = predictions_A, aes(x=time, y=C_daphnia , color=strings[1]), size=1.7)+
geom_line(data = predictions_B, aes(x=time, y=C_daphnia , color=strings[2]), size=1.7)+
geom_line(data = predictions_C, aes(x=time, y=C_daphnia , color=strings[3]), size=1.7)+
geom_line(data = predictions_D, aes(x=time, y=C_daphnia , color=strings[4]), size=1.7)+
geom_line(data = predictions_E, aes(x=time, y=C_daphnia , color=strings[5]), size=1.7)+
#Experiment A
geom_point(data = uptake_simple, aes(x=Time, y=Low_Ca , color=strings[1]), size=5)+
#Experiment B
geom_point(data = uptake_refreshed, aes(x=Time, y=Low_Ca_refreshed , color=strings[2]), size=5)+
#Experiment C
geom_point(data = uptake_simple, aes(x=Time, y=High_Ca , color=strings[3]), size=5)+
#Experiment D
geom_point(data = uptake_refreshed, aes(x=Time, y=High_Ca_refreshed , color=strings[4]), size=5)+
#Experiment E
geom_point(data = depuration_data, aes(x=Time, y=Control , color=strings[5]), size=5)+
labs(title = 'Tan et al. (2016)',
y = "Concentration in Daphnia Magna (mg TiO2/mg daphnia)", x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22)) +
scale_color_manual("Experiments", values=cls)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
draw_plot
library(ggplot2)
draw_plot <- ggplot()+
geom_line(data = predictions_A, aes(x=time, y=C_daphnia , color=strings[1]), size=1.7)+
geom_line(data = predictions_B, aes(x=time, y=C_daphnia , color=strings[2]), size=1.7)+
geom_line(data = predictions_C, aes(x=time, y=C_daphnia , color=strings[3]), size=1.7)+
geom_line(data = predictions_D, aes(x=time, y=C_daphnia , color=strings[4]), size=1.7)+
geom_line(data = predictions_E, aes(x=time, y=C_daphnia , color=strings[5]), size=1.7)+
#Experiment A
geom_point(data = uptake_simple, aes(x=Time, y=Low_Ca , color=strings[1]), size=5)+
#Experiment B
geom_point(data = uptake_refreshed, aes(x=Time, y=Low_Ca_refreshed , color=strings[2]), size=5)+
#Experiment C
geom_point(data = uptake_simple, aes(x=Time, y=High_Ca , color=strings[3]), size=5)+
#Experiment D
geom_point(data = uptake_refreshed, aes(x=Time, y=High_Ca_refreshed , color=strings[4]), size=5)+
#Experiment E
geom_point(data = depuration_data, aes(x=Time, y=Control , color=strings[5]), size=5)+
scale_y_log10()+
labs(title = 'Tan et al. (2016)',
y = "Concentration in Daphnia Magna (mg TiO2/mg daphnia)", x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22)) +
scale_color_manual("Experiments", values=cls)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
draw_plot
