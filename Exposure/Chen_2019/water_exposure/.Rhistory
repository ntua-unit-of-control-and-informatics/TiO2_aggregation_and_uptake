if(sum(solution$time %in% exp_data$Time) == dim(exp_data)[1]){
results <- solution[which(solution$time %in% exp_data$Time), 'C_daphnia']
} else{
stop(print("Length of predictions is not equal to the length of data"))
}
scores[i] <- mse_custom(exp_data[,i+1], results)
}
scores
library(ggplot2)
x <- optimization$solution
#plots
library(ggplot2)
exp_data <- cbind(C1_data["Time"], C1_data[nm_type], C2_data[nm_type], C3_data[nm_type])
colnames(exp_data) <- c('Time', 'C1', 'C2', 'C3')
constant_params <- c('k_sed'=0.02, 'ku'=0, 'ke_1'=0, 'I'=0)
sol_times <- seq(0,50, 0.5)
mape_scores <- c()
refresh_moments <- seq(3,21)
keep_predictions <- data.frame(matrix(NA, nrow = length(sol_times), ncol = 4))
keep_predictions[,1] <- sol_times
colnames(keep_predictions) <- c('Time', 'C1', 'C2', 'C3')
for (i in 1:3) { #loop for the 3 different concentrations
fitted_params <- c("F_rate"=x[2*i-1], "ke_2"=x[2*i])
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0[i], 'C_algae'=0, 'C_daphnia'=0 )
eventdat <- data.frame(var = c("C_water"),
time = c(refresh_moments,24) ,
value = c(rep(inits[1], length(refresh_moments)), 0),
method = c(rep("rep", (length(refresh_moments)+1)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
events = list(data = eventdat),
method="lsodes",
rtol = 1e-3, atol = 1e-3))
keep_predictions[,i+1] <- solution$C_daphnia
}
head(solution)
exp_data
strings <- as.character(C_water_0)
color_codes <- scales::hue_pal()(3) # to return 5 color codes
cls <- c()
for (i in 1:length(strings)) {
strings[i] <- paste0(strings[i], " mg/ml")
cls[i] <- color_codes[i]
names(cls)[i] <- strings[i]
}
ggplot()+
geom_line(data = keep_predictions, aes(x=Time, y=C1, color=strings[1]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C2, color=strings[2]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C3, color=strings[3]), size=1.7)+
geom_point(data = exp_data, aes(x=Time, y=C1, color=strings[1]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C2, color=strings[2]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C3, color=strings[3]), size=3)+
#scale_y_log10()
ggplot()+
geom_line(data = keep_predictions, aes(x=Time, y=C1, color=strings[1]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C2, color=strings[2]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C3, color=strings[3]), size=1.7)+
geom_point(data = exp_data, aes(x=Time, y=C1, color=strings[1]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C2, color=strings[2]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C3, color=strings[3]), size=3)
ggplot()+
geom_line(data = keep_predictions, aes(x=Time, y=C1, color=strings[1]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C2, color=strings[2]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C3, color=strings[3]), size=1.7)+
geom_point(data = exp_data, aes(x=Time, y=C1, color=strings[1]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C2, color=strings[2]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C3, color=strings[3]), size=3)+
scale_y_log10()
take_results <- function(nm_type, N_iter){
#x0 <- runif(6)
x0 <- rep(c(5e03,5e-03),3)
C_water_0 <- c(0.1, 1, 10) # mg/L
#N_iter <- 3500
opts <- list( "algorithm" = "NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 0,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter,
"print_level" = 1)
optimization <- nloptr::nloptr(x0 = x0,
eval_f = obj_func,
lb	= rep(0,length(x0)),
opts = opts,
C_water_0 = C_water_0,
nm_type = nm_type)
fitted_params <- optimization$solution
params_df <- data.frame(matrix(fitted_params, nrow = 3, byrow = T))
colnames(params_df) <- c("F_rate", "ke_2")
rownames(params_df) <- c("0.1 mg/ml", "1 mg/ml", "10 mg/ml")
results_plot <- plot_func(optimization, C_water_0, nm_type)
return(list("optimization" = optimization,
"Fitted_params" = params_df,
"plot"=results_plot))
}
# TiO2-5A
nm_types <- as.character(Mapping[,2])
# TiO2-5A
nm_type <- nm_types[1]
fit_A <- take_results(nm_type, 3000)
fit_A
take_results <- function(nm_type, N_iter){
x0 <- runif(6)
C_water_0 <- c(0.1, 1, 10) # mg/L
#N_iter <- 3500
opts <- list( "algorithm" = "NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 0,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter,
"print_level" = 1)
optimization <- nloptr::nloptr(x0 = x0,
eval_f = obj_func,
lb	= rep(1e-02,length(x0)),
opts = opts,
C_water_0 = C_water_0,
nm_type = nm_type)
fitted_params <- optimization$solution
params_df <- data.frame(matrix(fitted_params, nrow = 3, byrow = T))
colnames(params_df) <- c("F_rate", "ke_2")
rownames(params_df) <- c("0.1 mg/ml", "1 mg/ml", "10 mg/ml")
results_plot <- plot_func(optimization, C_water_0, nm_type)
return(list("optimization" = optimization,
"Fitted_params" = params_df,
"plot"=results_plot))
}
################################################################################
# TiO2-5A
nm_types <- as.character(Mapping[,2])
# TiO2-5A
nm_type <- nm_types[1]
fit_A <- take_results(nm_type, 1000)
fit_A
take_results <- function(nm_type, N_iter){
x0 <- runif(6)
C_water_0 <- c(0.1, 1, 10) # mg/L
#N_iter <- 3500
opts <- list( "algorithm" = "NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 0,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter,
"print_level" = 1)
optimization <- nloptr::nloptr(x0 = x0,
eval_f = obj_func,
lb	= rep(1e-02,length(x0)),
opts = opts,
C_water_0 = C_water_0,
nm_type = nm_type)
fitted_params <- optimization$solution
params_df <- data.frame(matrix(fitted_params, nrow = 3, byrow = T))
colnames(params_df) <- c("F_rate", "ke_2")
rownames(params_df) <- c("0.1 mg/ml", "1 mg/ml", "10 mg/ml")
results_plot <- plot_func(optimization, C_water_0, nm_type)
return(list("optimization" = optimization,
"Fitted_params" = params_df,
"plot"=results_plot))
}
################################################################################
# TiO2-5A
nm_types <- as.character(Mapping[,2])
# TiO2-5A
nm_type <- nm_types[1]
fit_A <- take_results(nm_type, 1000)
fit_A
take_results <- function(nm_type, N_iter){
x0 <- runif(6)
C_water_0 <- c(0.1, 1, 10) # mg/L
#N_iter <- 3500
opts <- list( "algorithm" = "NLOPT_LN_SBPLX" , #"NLOPT_LN_NEWUOA"
"xtol_rel" = 0,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter,
"print_level" = 1)
optimization <- nloptr::nloptr(x0 = x0,
eval_f = obj_func,
lb	= rep(1e-02,length(x0)),
opts = opts,
C_water_0 = C_water_0,
nm_type = nm_type)
fitted_params <- optimization$solution
params_df <- data.frame(matrix(fitted_params, nrow = 3, byrow = T))
colnames(params_df) <- c("F_rate", "ke_2")
rownames(params_df) <- c("0.1 mg/ml", "1 mg/ml", "10 mg/ml")
results_plot <- plot_func(optimization, C_water_0, nm_type)
return(list("optimization" = optimization,
"Fitted_params" = params_df,
"plot"=results_plot))
}
################################################################################
# TiO2-5A
nm_types <- as.character(Mapping[,2])
# TiO2-5A
nm_type <- nm_types[1]
fit_A <- take_results(nm_type, 1000)
fit_A
take_results <- function(nm_type, N_iter){
x0 <- runif(6)
C_water_0 <- c(0.1, 1, 10) # mg/L
#N_iter <- 3500
opts <- list( "algorithm" = "NLOPT_LN_SBPLX" , #"NLOPT_LN_NEWUOA"
"xtol_rel" = 0,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter,
"print_level" = 1)
optimization <- nloptr::nloptr(x0 = x0,
eval_f = obj_func,
lb	= rep(1e-02,length(x0)),
opts = opts,
C_water_0 = C_water_0,
nm_type = nm_type)
fitted_params <- optimization$solution
params_df <- data.frame(matrix(fitted_params, nrow = 3, byrow = T))
colnames(params_df) <- c("F_rate", "ke_2")
rownames(params_df) <- c("0.1 mg/ml", "1 mg/ml", "10 mg/ml")
results_plot <- plot_func(optimization, C_water_0, nm_type)
return(list("optimization" = optimization,
"Fitted_params" = params_df,
"plot"=results_plot))
}
################################################################################
# TiO2-5A
nm_types <- as.character(Mapping[,2])
# TiO2-5A
nm_type <- nm_types[1]
fit_A <- take_results(nm_type, 3000)
fit_A
# TiO2-10A
nm_type <- nm_types[2]
fit_B <- take_results(nm_type, 3000)
fit_B
# TiO2-100A
nm_type <- nm_types[3]
fit_C <- take_results(nm_type, 3000)
fit_C
# TiO2-P25
nm_type <- nm_types[4]
fit_D <- take_results(nm_type, 3000)
fit_D
# TiO2-25R
nm_type <- nm_types[5]
fit_E <- take_results(nm_type, 3000)
fit_E
save.image("C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/Exposure/Chen_2019/water_exposure/test_1.RData")
fit_E
View(fit_A)
2022.803 /1398.624
fit_D
4391.372 /1691.421
fit_C
2932.619 /1743.424
fit_B
3403.1583 /452.0255
C_water_0
plot_title
nm_type <- nm_types[1]
2.61e03
#x <- optimization$solution
x <- c(2.61e03, 0.057, 2.23e03, 0.098, 0.46e03, 0.082)
#plots
library(ggplot2)
exp_data <- cbind(C1_data["Time"], C1_data[nm_type], C2_data[nm_type], C3_data[nm_type])
colnames(exp_data) <- c('Time', 'C1', 'C2', 'C3')
constant_params <- c('k_sed'=0.02, 'ku'=0, 'ke_1'=0, 'I'=0)
sol_times <- seq(0,50, 0.5)
mape_scores <- c()
refresh_moments <- seq(3,21)
keep_predictions <- data.frame(matrix(NA, nrow = length(sol_times), ncol = 4))
keep_predictions[,1] <- sol_times
colnames(keep_predictions) <- c('Time', 'C1', 'C2', 'C3')
for (i in 1:3) { #loop for the 3 different concentrations
fitted_params <- c("F_rate"=x[2*i-1], "ke_2"=x[2*i])
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0[i], 'C_algae'=0, 'C_daphnia'=0 )
eventdat <- data.frame(var = c("C_water"),
time = c(refresh_moments,24) ,
value = c(rep(inits[1], length(refresh_moments)), 0),
method = c(rep("rep", (length(refresh_moments)+1)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
events = list(data = eventdat),
method="lsodes",
rtol = 1e-3, atol = 1e-3))
keep_predictions[,i+1] <- solution$C_daphnia
}
head(solution)
exp_data
strings <- as.character(C_water_0)
color_codes <- scales::hue_pal()(3) # to return 5 color codes
cls <- c()
for (i in 1:length(strings)) {
strings[i] <- paste0(strings[i], " mg/ml")
cls[i] <- color_codes[i]
names(cls)[i] <- strings[i]
}
ggplot()+
geom_line(data = keep_predictions, aes(x=Time, y=C1, color=strings[1]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C2, color=strings[2]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C3, color=strings[3]), size=1.7)+
geom_point(data = exp_data, aes(x=Time, y=C1, color=strings[1]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C2, color=strings[2]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C3, color=strings[3]), size=3)+
#scale_y_log10()
labs(title = plot_title,
y = "Concentration in Daphnia Magna (mg TiO2/kg daphnia)", x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22)) +
scale_color_manual("TiO2 mg/l", values=cls)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
library(ggplot2)
#x <- optimization$solution
x <- c(2.61e03, 0.057, 2.23e03, 0.098, 0.46e03, 0.082)
#plots
library(ggplot2)
exp_data <- cbind(C1_data["Time"], C1_data[nm_type], C2_data[nm_type], C3_data[nm_type])
colnames(exp_data) <- c('Time', 'C1', 'C2', 'C3')
constant_params <- c('k_sed'=0.02, 'ku'=0, 'ke_1'=0, 'I'=0)
sol_times <- seq(0,50, 0.5)
mape_scores <- c()
refresh_moments <- seq(3,21)
keep_predictions <- data.frame(matrix(NA, nrow = length(sol_times), ncol = 4))
keep_predictions[,1] <- sol_times
colnames(keep_predictions) <- c('Time', 'C1', 'C2', 'C3')
for (i in 1:3) { #loop for the 3 different concentrations
fitted_params <- c("F_rate"=x[2*i-1], "ke_2"=x[2*i])
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0[i], 'C_algae'=0, 'C_daphnia'=0 )
eventdat <- data.frame(var = c("C_water"),
time = c(refresh_moments,24) ,
value = c(rep(inits[1], length(refresh_moments)), 0),
method = c(rep("rep", (length(refresh_moments)+1)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
events = list(data = eventdat),
method="lsodes",
rtol = 1e-3, atol = 1e-3))
keep_predictions[,i+1] <- solution$C_daphnia
}
head(solution)
exp_data
strings <- as.character(C_water_0)
color_codes <- scales::hue_pal()(3) # to return 5 color codes
cls <- c()
for (i in 1:length(strings)) {
strings[i] <- paste0(strings[i], " mg/ml")
cls[i] <- color_codes[i]
names(cls)[i] <- strings[i]
}
ggplot()+
geom_line(data = keep_predictions, aes(x=Time, y=C1, color=strings[1]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C2, color=strings[2]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C3, color=strings[3]), size=1.7)+
geom_point(data = exp_data, aes(x=Time, y=C1, color=strings[1]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C2, color=strings[2]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C3, color=strings[3]), size=3)+
#scale_y_log10()
labs(title = nm_type,
y = "Concentration in Daphnia Magna (mg TiO2/kg daphnia)", x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22)) +
scale_color_manual("TiO2 mg/l", values=cls)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
library(ggplot2)
#x <- optimization$solution
x <- c(2.61e03, 0.057, 2.23e03, 0.098, 0.46e03, 0.082)
#plots
library(ggplot2)
exp_data <- cbind(C1_data["Time"], C1_data[nm_type], C2_data[nm_type], C3_data[nm_type])
colnames(exp_data) <- c('Time', 'C1', 'C2', 'C3')
constant_params <- c('k_sed'=0, 'ku'=0, 'ke_1'=0, 'I'=0)
sol_times <- seq(0,50, 0.5)
mape_scores <- c()
refresh_moments <- seq(3,21)
keep_predictions <- data.frame(matrix(NA, nrow = length(sol_times), ncol = 4))
keep_predictions[,1] <- sol_times
colnames(keep_predictions) <- c('Time', 'C1', 'C2', 'C3')
for (i in 1:3) { #loop for the 3 different concentrations
fitted_params <- c("F_rate"=x[2*i-1], "ke_2"=x[2*i])
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0[i], 'C_algae'=0, 'C_daphnia'=0 )
eventdat <- data.frame(var = c("C_water"),
time = c(refresh_moments,24) ,
value = c(rep(inits[1], length(refresh_moments)), 0),
method = c(rep("rep", (length(refresh_moments)+1)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
events = list(data = eventdat),
method="lsodes",
rtol = 1e-3, atol = 1e-3))
keep_predictions[,i+1] <- solution$C_daphnia
}
head(solution)
exp_data
strings <- as.character(C_water_0)
color_codes <- scales::hue_pal()(3) # to return 5 color codes
cls <- c()
for (i in 1:length(strings)) {
strings[i] <- paste0(strings[i], " mg/ml")
cls[i] <- color_codes[i]
names(cls)[i] <- strings[i]
}
ggplot()+
geom_line(data = keep_predictions, aes(x=Time, y=C1, color=strings[1]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C2, color=strings[2]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C3, color=strings[3]), size=1.7)+
geom_point(data = exp_data, aes(x=Time, y=C1, color=strings[1]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C2, color=strings[2]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C3, color=strings[3]), size=3)+
#scale_y_log10()
labs(title = nm_type,
y = "Concentration in Daphnia Magna (mg TiO2/kg daphnia)", x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22)) +
scale_color_manual("TiO2 mg/l", values=cls)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
library(ggplot2)
#x <- optimization$solution
x <- c(2.61e03, 0.057, 2.23e03, 0.098, 0.46e03, 0.082)
#plots
library(ggplot2)
exp_data <- cbind(C1_data["Time"], C1_data[nm_type], C2_data[nm_type], C3_data[nm_type])
colnames(exp_data) <- c('Time', 'C1', 'C2', 'C3')
constant_params <- c('k_sed'=0.02, 'ku'=0, 'ke_1'=0, 'I'=0)
sol_times <- seq(0,50, 0.5)
mape_scores <- c()
refresh_moments <- seq(3,21)
keep_predictions <- data.frame(matrix(NA, nrow = length(sol_times), ncol = 4))
keep_predictions[,1] <- sol_times
colnames(keep_predictions) <- c('Time', 'C1', 'C2', 'C3')
for (i in 1:3) { #loop for the 3 different concentrations
fitted_params <- c("F_rate"=x[2*i-1], "ke_2"=x[2*i])
params <- c(fitted_params, constant_params)
inits <- c('C_water'=C_water_0[i], 'C_algae'=0, 'C_daphnia'=0 )
eventdat <- data.frame(var = c("C_water"),
time = c(refresh_moments,24) ,
value = c(rep(inits[1], length(refresh_moments)), 0),
method = c(rep("rep", (length(refresh_moments)+1)))
)
solution <- data.frame(deSolve::ode(times = sol_times,  func = ode_func, y = inits,
parms = params,
events = list(data = eventdat),
method="lsodes",
rtol = 1e-3, atol = 1e-3))
keep_predictions[,i+1] <- solution$C_daphnia
}
head(solution)
exp_data
strings <- as.character(C_water_0)
color_codes <- scales::hue_pal()(3) # to return 5 color codes
cls <- c()
for (i in 1:length(strings)) {
strings[i] <- paste0(strings[i], " mg/ml")
cls[i] <- color_codes[i]
names(cls)[i] <- strings[i]
}
ggplot()+
geom_line(data = keep_predictions, aes(x=Time, y=C1, color=strings[1]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C2, color=strings[2]), size=1.7)+
geom_line(data = keep_predictions, aes(x=Time, y=C3, color=strings[3]), size=1.7)+
geom_point(data = exp_data, aes(x=Time, y=C1, color=strings[1]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C2, color=strings[2]), size=3)+
geom_point(data = exp_data, aes(x=Time, y=C3, color=strings[3]), size=3)+
#scale_y_log10()
labs(title = nm_type,
y = "Concentration in Daphnia Magna (mg TiO2/kg daphnia)", x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5,size=30),
axis.title.y =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.y=element_text(size=22),
axis.title.x =element_text(hjust = 0.5,size=25,face="bold"),
axis.text.x=element_text(size=22),
legend.title=element_text(hjust = 0.5,size=25),
legend.text=element_text(size=22)) +
scale_color_manual("TiO2 mg/l", values=cls)+
theme(legend.key.size = unit(1.5, 'cm'),
legend.title = element_text(size=14),
legend.text = element_text(size=14),
axis.text = element_text(size = 14))
