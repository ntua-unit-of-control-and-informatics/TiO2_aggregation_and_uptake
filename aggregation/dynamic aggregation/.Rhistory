## Chaos in the atmosphere
differential <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- a*exp(b*t)
list(c(dX))
})
}
obj<- function(x,time,diameter){
state <- c(X = 671)
times <-  seq(1,time[length(time)],0.1)
params <- list("a" = x[1], "b" = x[2])
out <- ode(y = state, times = times, func = differential, parms = params, method="bdf",rtol = 1e-05, atol = 1e-05)
out <- out[out[,1] %in% time,]
sum = 0
for (i in 1:length(time)){
sum <- sum + (out[i,2]-diameter[i])^2
}
return(sum)
}
setwd("~/")
data <- read.csv("Hydrodynamic_diameter_data.csv")
setwd("C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation/dynamic aggregation")
data <- read.csv("Hydrodynamic_diameter_data.csv")
time <- round(data[2:dim(data)[1],1])
diameter <- data[2:dim(data)[1],2]
N_iter <- 1000
names(x0) <- c("a", "b")
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 1e-06,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 0.0,
"print_level" = 1)
x0 = c(5, -0.7)
optimization <- nloptr::nloptr( x0 = x0,
eval_f = obj,
opts = opts, time = time, diameter = diameter)
## Chaos in the atmosphere
differential <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- a*exp(b*t)
list(c(dX))
})
}
obj<- function(x,time,diameter){
state <- c(X = 671)
times <-  seq(1,time[length(time)],0.1)
params <- list("a" = x[1], "b" = x[2])
out <- deSolve::ode(y = state, times = times, func = differential, parms = params, method="bdf",rtol = 1e-05, atol = 1e-05)
out <- out[out[,1] %in% time,]
sum = 0
for (i in 1:length(time)){
sum <- sum + (out[i,2]-diameter[i])^2
}
return(sum)
}
obj<- function(x,time,diameter){
state <- c(X = 671)
times <-  seq(1,time[length(time)],0.1)
params <- list("a" = x[1], "b" = x[2])
out <- deSolve::ode(y = state, times = times, func = differential, parms = params, method="bdf",rtol = 1e-05, atol = 1e-05)
out <- out[out[,1] %in% time,]
sum = 0
for (i in 1:length(time)){
sum <- sum + (out[i,2]-diameter[i])^2
}
return(sum)
}
setwd("C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation/dynamic aggregation")
data <- read.csv("Hydrodynamic_diameter_data.csv")
time <- round(data[2:dim(data)[1],1])
diameter <- data[2:dim(data)[1],2]
N_iter <- 1000
names(x0) <- c("a", "b")
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 1e-06,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 0.0,
"print_level" = 1)
x0 = c(5, -0.7)
optimization <- nloptr::nloptr( x0 = x0,
eval_f = obj,
opts = opts, time = time, diameter = diameter)
state      <- c(X = 671)
out <- ode(y = state, times = times, func = differential,
parms = list("a"=optimization$solution[1], "b"=optimization$solution[2]))
#"c"=optimization$solution[3], "d"=optimization$solution[4]))
out <- deSolve::ode(y = state, times = times, func = differential,
parms = list("a"=optimization$solution[1], "b"=optimization$solution[2]))
#"c"=optimization$solution[3], "d"=optimization$solution[4]))
plot(out)
out <- deSolve::ode(y = state, times = time, func = differential,
parms = list("a"=optimization$solution[1], "b"=optimization$solution[2]))
#"c"=optimization$solution[3], "d"=optimization$solution[4]))
plot(out)
data
plot(out)
lines(data$Time,data$Diameter)
plot(out)
lines(data$Time,data$Diameter, pch=19)
plot(out)
lines(data$Time,data$Diameter, pch=19)
plot(data$Time,data$Diameter, pch=19)
plot(data$Time,data$Diameter, pch=19)
plot(out)
plot(data$Time,data$Diameter, pch=19)
plot(out)
plot(data$Time,data$Diameter, pch=19)
plot(data$Time,data$Diameter, pch=19)
lines(data$Time,data$Diameter, pch=19)
plot(data$Time,data$Diameter, pch=19)
lines(out)
library(ggplot2)
## Chaos in the
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()
out <- as.dataframe(deSolve::ode(y = state, times = time, func = differential,
parms = list("a"=optimization$solution[1],
"b"=optimization$solution[2])))
#"c"=optimization$solution[3], "d"=optimization$solution[4]))
out <- as.data.frame(deSolve::ode(y = state, times = time, func = differential,
parms = list("a"=optimization$solution[1],
"b"=optimization$solution[2])))
head(out)
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = out, aes(x=out$time, out$X
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = out, aes(x=out$time, out$X))
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = out, aes(x=out[1,], out[2,]))
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = out, aes(x=out[1,], y=out[2,]))
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = out, aes(x=out[,1], y=out[,2]))
head(data)
exp_model <- lm(Diameter ~ poly(Time, 3, raw=T), data=data)
exp_model
summary(exp_model)
data[1,]
exp_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(exp_model)
exp_model <- lm(Diameter ~ poly(Time, 3, raw=T), data=data)
summary(exp_model)
exp_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(exp_model)
exp_model <- lm(Diameter ~ poly(Time, 1, raw=T), data=data)
summary(exp_model)
exp_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(exp_model)
exp_model <- lm(Diameter ~ poly(Time, 5, raw=T), data=data)
summary(exp_model)
exp_model <- lm(Diameter ~ poly(Time, 10, raw=T), data=data)
summary(exp_model)
y_pred <- predict(exp_model, newdata = data$Time)
exp_model <- lm(Diameter ~ poly(Time, 10, raw=T), data=data)
summary(exp_model)
y_pred <- predict(exp_model, newdata = data$Time)
y_pred <- predict(exp_model)
data_pred <- cbind(data$Time, y_pred)
data_pred <- cbind(data$Time, y_pred)
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
data_pred
class(data_pred)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
class(data_pred)
head(data_pred)
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
exp_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(exp_model)
y_pred <- predict(exp_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
exp_model <- lm(Diameter ~ poly(Time, 1, raw=T), data=data)
summary(exp_model)
y_pred <- predict(exp_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
exp_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(exp_model)
y_pred <- predict(exp_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
exp_model <- lm(Diameter ~ poly(Time, 3, raw=T), data=data)
summary(exp_model)
y_pred <- predict(exp_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
exp_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(exp_model)
y_pred <- predict(exp_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
polynomial_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(polynomial_model)
y_pred <- predict(polynomial_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
polynomial_model <- lm(Diameter ~ poly(Time, 200, raw=T), data=data)
summary(polynomial_model)
y_pred <- predict(polynomial_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
polynomial_model <- lm(Diameter ~ poly(Time, 200, raw=T), data=data)
polynomial_model <- lm(Diameter ~ poly(Time, 10, raw=T), data=data)
summary(polynomial_model)
polynomial_model <- lm(Diameter ~ poly(Time, 50, raw=T), data=data)
summary(polynomial_model)
y_pred <- predict(polynomial_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
polynomial_model <- lm(Diameter ~ poly(Time, 70, raw=T), data=data)
summary(polynomial_model)
y_pred <- predict(polynomial_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
polynomial_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(polynomial_model)
y_pred <- predict(polynomial_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
?lm()
setwd("C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation/dynamic aggregation")
data <- read.csv("Hydrodynamic_diameter_data.csv")
# polynomial model
polynomial_model <- lm(Diameter ~ poly(Time, 2, raw=T), data=data)
summary(polynomial_model)
y_pred <- predict(polynomial_model)
data_pred <- as.data.frame(cbind(data$Time, y_pred))
colnames(data_pred) <- c("Time", "y_pred")
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
dev.off()
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
dev.off()
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
dev.off()
ggplot(data, aes(x=Time, y=Diameter))+
geom_point()+
geom_line(data = data_pred, aes(x=Time, y=y_pred))
summary(polynomial_model)
