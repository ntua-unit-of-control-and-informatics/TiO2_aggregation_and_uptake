png(filename = "mycorrplot.png", width = 1200, height = 800)
corrplot::corrplot(correlation, method="color", addCoef.col = 1,number.cex = 0.3, tl.cex = 0.3)
dev.off()
fitXGB
varImp(fitXGB)
dmy_data[1]
dmy_data[1,]
newdata = DATA[1:5,
newdata
newdata <-  DATA[1:5,]
newdata <-  DATA[1:5,]
newdata
newdata <-  cbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata
newdata <-  rbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata
data[1:5,]
data$`Nominal.Size.(nm)`
data<-openxlsx::read.xlsx("hydrodynamic sizes.xlsx", )
data$`Nominal.Size.(nm)` <- as.numeric(data$`Nominal.Size.(nm)`)
data$`Zeta.Potential.(mV)` <- as.numeric(data$`Zeta.Potential.(mV)`)
data$`Anatase.Crystal.(%)` <- as.numeric(data$`Anatase.Crystal.(%)`)
data$pH <- as.numeric(data$pH)
select_variables <- !colnames(data) %in% c("Study",  "Doi", "Nanoparticle", "Polydispersity.index.(PDI)",
"Zeta.Potential.(mV)","Electrophoretic.Mobility.(1e-08m^2/s/V)",
"Coating", "Medium.Type", "Rutile.Crystal.(%)",   "Amorphous.crystal.(%)",
"Sonication.power.(W/L)", "Sonication.frequency.(kHz)","TOC.(mg/L)",
"FBS.(%)", "TDS.(mg/L)" )
DATA <- data[,select_variables]
colnames(DATA) <- c("Nominal.Size", "Nominal.SSA", "Mean.HD.size",
"Anatase",
"Surface.property","Aging", "Concentration",
"Conductivity", "IS",
"pH",
"BSA", "Sonication.time",
"Sonication.power")
newdata <-  rbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata
#LOAD PACKAGES
library(caret)
library(xgboost)
## R version 3.5.1
## SET WORKING DIRECTORY
#setwd("~/../Dropbox/DOXORUBICIN/NEW PROJECT DOX/DRUG RELEASE DATA/CODE_DOX/code_DOX_1a ") ### you can set your own working directory
setwd("C:/Users/ptsir/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation")
#### FUNCTIONS FOR MODEL STATISTICS
rmse = function(m, o){
sqrt(mean((m - o)^2))
}
## Rsquared FUNCTION (2 DIFFERENT WAYS OF CALCULATION)
Rsquare=function(m,o){
(cov(m,o)/sqrt(var(m)*var(o)))^2
}
R2=function(m,o){
y<-mean(o)
metric1<-(o - m) ^ 2
metric2<- (o-y)^2
s1<-sum(metric1)
s2<-sum(metric2)
ss<-s1/s2
1-s1/s2
}
data<-openxlsx::read.xlsx("hydrodynamic sizes.xlsx", )
data$`Nominal.Size.(nm)` <- as.numeric(data$`Nominal.Size.(nm)`)
data$`Zeta.Potential.(mV)` <- as.numeric(data$`Zeta.Potential.(mV)`)
data$`Anatase.Crystal.(%)` <- as.numeric(data$`Anatase.Crystal.(%)`)
data$pH <- as.numeric(data$pH)
select_variables <- !colnames(data) %in% c("Study",  "Doi", "Nanoparticle", "Polydispersity.index.(PDI)",
"Zeta.Potential.(mV)","Electrophoretic.Mobility.(1e-08m^2/s/V)",
"Coating", "Medium.Type", "Rutile.Crystal.(%)",   "Amorphous.crystal.(%)",
"Sonication.power.(W/L)", "Sonication.frequency.(kHz)","TOC.(mg/L)",
"FBS.(%)", "TDS.(mg/L)" )
DATA <- data[,select_variables]
colnames(DATA) <- c("Nominal.Size", "Nominal.SSA", "Mean.HD.size",
"Anatase",
"Surface.property","Aging", "Concentration",
"Conductivity", "IS",
"pH",
"BSA", "Sonication.time",
"Sonication.power")
mean_dr<-mean(DATA$`Mean.HD.size`) ## 0
sd_dr<-sd(DATA$`Mean.HD.size`)
preprocessParams2 <- preProcess(DATA, method=c("center","scale"))
processed_data<-predict(preprocessParams2, DATA)
## ONE HOT ENCODING
dmyRTD<-dummyVars(~.,data=processed_data)
dmy_data<-predict(dmyRTD, newdata=processed_data)
dmy_data[is.na(dmy_data)]<--20
dmy_data <- dmy_data[ , -which(colnames(dmy_data) %in% c("Surface.propertyNone"))]
## XGB3A
trainControl<-trainControl(method="repeatedcv", number=10, repeats=3,verboseIter = FALSE,allowParallel = FALSE, savePredictions=TRUE)
tunegrid <- expand.grid(nrounds = 200,
max_depth = 7 ,
eta = 0.10,
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.5
)
set.seed(125)
fitXGB<-train(Mean.HD.size~., data =dmy_data, method="xgbTree", trControl=trainControl ,
tuneGrid=tunegrid , importance=TRUE,verbosity=0)
fitXGB
varImp(fitXGB)
## PREDICTIONS ON TRAIN SET (resubstitution)
predXGB<-predict(fitXGB, newdata=dmy_data)*sd_dr+mean_dr
cor(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
rmse(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
Rsquare(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
R2(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
ggplot(data, mapping=aes(`Mean.Hydrodynamic.size.mean.(nm)`,predXGB, color=predXGB))+
geom_point()+
geom_abline()
fitXGB
varImp(fitXGB)
newdata <-  rbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata$Concentration[1:5] = rep(0.1,5)
newdata$Concentration[6:10] = rep(1,5)
newdata$Concentration[11:15] = rep(10,5)
newdata$Concentration[16:20] = rep(50,5)
newdata
processed_chen<-predict(preprocessParams2, newdata)
processed_chen<-predict(preprocessParams2, newdata)
## ONE HOT ENCODING
dmy_chen<-predict(dmyRTD, newdata=processed_chen)
dmy_data[is.na(dmy_data)]<--20
dmy_data <- dmy_data[ , -which(colnames(dmy_data) %in% c("Surface.propertyNone"))]
dmy_chen
processed_chen
dmy_chen<-predict(dmyRTD, newdata=processed_chen)
levels(processed_chen$Surface.property) <- levels(DATA$Surface.property)
str(processed_chen)
processed_chen<-predict(preprocessParams2, newdata)
processed_chen$Surface.property <- as.factor(processed_chen$Surface.property)
levels(processed_chen$Surface.property) <- levels(DATA$Surface.property)
levels(DATA$Surface.property)
data$Surface.property <- as.factor(data$Surface.property)
#LOAD PACKAGES
library(caret)
library(xgboost)
## R version 3.5.1
## SET WORKING DIRECTORY
#setwd("~/../Dropbox/DOXORUBICIN/NEW PROJECT DOX/DRUG RELEASE DATA/CODE_DOX/code_DOX_1a ") ### you can set your own working directory
setwd("C:/Users/ptsir/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation")
#### FUNCTIONS FOR MODEL STATISTICS
rmse = function(m, o){
sqrt(mean((m - o)^2))
}
## Rsquared FUNCTION (2 DIFFERENT WAYS OF CALCULATION)
Rsquare=function(m,o){
(cov(m,o)/sqrt(var(m)*var(o)))^2
}
R2=function(m,o){
y<-mean(o)
metric1<-(o - m) ^ 2
metric2<- (o-y)^2
s1<-sum(metric1)
s2<-sum(metric2)
ss<-s1/s2
1-s1/s2
}
data<-openxlsx::read.xlsx("hydrodynamic sizes.xlsx", )
data$`Nominal.Size.(nm)` <- as.numeric(data$`Nominal.Size.(nm)`)
data$`Zeta.Potential.(mV)` <- as.numeric(data$`Zeta.Potential.(mV)`)
data$`Anatase.Crystal.(%)` <- as.numeric(data$`Anatase.Crystal.(%)`)
data$pH <- as.numeric(data$pH)
data$Surface.property <- as.factor(data$Surface.property)
select_variables <- !colnames(data) %in% c("Study",  "Doi", "Nanoparticle", "Polydispersity.index.(PDI)",
"Zeta.Potential.(mV)","Electrophoretic.Mobility.(1e-08m^2/s/V)",
"Coating", "Medium.Type", "Rutile.Crystal.(%)",   "Amorphous.crystal.(%)",
"Sonication.power.(W/L)", "Sonication.frequency.(kHz)","TOC.(mg/L)",
"FBS.(%)", "TDS.(mg/L)" )
DATA <- data[,select_variables]
colnames(DATA) <- c("Nominal.Size", "Nominal.SSA", "Mean.HD.size",
"Anatase",
"Surface.property","Aging", "Concentration",
"Conductivity", "IS",
"pH",
"BSA", "Sonication.time",
"Sonication.power")
mean_dr<-mean(DATA$`Mean.HD.size`) ## 0
sd_dr<-sd(DATA$`Mean.HD.size`)
preprocessParams2 <- preProcess(DATA, method=c("center","scale"))
processed_data<-predict(preprocessParams2, DATA)
## ONE HOT ENCODING
dmyRTD<-dummyVars(~.,data=processed_data)
dmy_data<-predict(dmyRTD, newdata=processed_data)
dmy_data[is.na(dmy_data)]<--20
dmy_data <- dmy_data[ , -which(colnames(dmy_data) %in% c("Surface.propertyNone"))]
## XGB3A
trainControl<-trainControl(method="repeatedcv", number=10, repeats=3,verboseIter = FALSE,allowParallel = FALSE, savePredictions=TRUE)
tunegrid <- expand.grid(nrounds = 200,
max_depth = 7 ,
eta = 0.10,
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.5
)
set.seed(125)
fitXGB<-train(Mean.HD.size~., data =dmy_data, method="xgbTree", trControl=trainControl ,
tuneGrid=tunegrid , importance=TRUE,verbosity=0)
fitXGB
varImp(fitXGB)
## PREDICTIONS ON TRAIN SET (resubstitution)
predXGB<-predict(fitXGB, newdata=dmy_data)*sd_dr+mean_dr
cor(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
rmse(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
Rsquare(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
R2(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
ggplot(data, mapping=aes(`Mean.Hydrodynamic.size.mean.(nm)`,predXGB, color=predXGB))+
geom_point()+
geom_abline()
str(data)
str(DATA)
dmy_data
#LOAD PACKAGES
library(caret)
library(xgboost)
## R version 3.5.1
## SET WORKING DIRECTORY
#setwd("~/../Dropbox/DOXORUBICIN/NEW PROJECT DOX/DRUG RELEASE DATA/CODE_DOX/code_DOX_1a ") ### you can set your own working directory
setwd("C:/Users/ptsir/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation")
#### FUNCTIONS FOR MODEL STATISTICS
rmse = function(m, o){
sqrt(mean((m - o)^2))
}
## Rsquared FUNCTION (2 DIFFERENT WAYS OF CALCULATION)
Rsquare=function(m,o){
(cov(m,o)/sqrt(var(m)*var(o)))^2
}
R2=function(m,o){
y<-mean(o)
metric1<-(o - m) ^ 2
metric2<- (o-y)^2
s1<-sum(metric1)
s2<-sum(metric2)
ss<-s1/s2
1-s1/s2
}
data<-openxlsx::read.xlsx("hydrodynamic sizes.xlsx", )
data$`Nominal.Size.(nm)` <- as.numeric(data$`Nominal.Size.(nm)`)
data$`Zeta.Potential.(mV)` <- as.numeric(data$`Zeta.Potential.(mV)`)
data$`Anatase.Crystal.(%)` <- as.numeric(data$`Anatase.Crystal.(%)`)
data$pH <- as.numeric(data$pH)
data$Surface.property <- as.factor(data$Surface.property)
select_variables <- !colnames(data) %in% c("Study",  "Doi", "Nanoparticle", "Polydispersity.index.(PDI)",
"Zeta.Potential.(mV)","Electrophoretic.Mobility.(1e-08m^2/s/V)",
"Coating", "Medium.Type", "Rutile.Crystal.(%)",   "Amorphous.crystal.(%)",
"Sonication.power.(W/L)", "Sonication.frequency.(kHz)","TOC.(mg/L)",
"FBS.(%)", "TDS.(mg/L)" )
DATA <- data[,select_variables]
colnames(DATA) <- c("Nominal.Size", "Nominal.SSA", "Mean.HD.size",
"Anatase",
"Surface.property","Aging", "Concentration",
"Conductivity", "IS",
"pH",
"BSA", "Sonication.time",
"Sonication.power")
mean_dr<-mean(DATA$`Mean.HD.size`) ## 0
sd_dr<-sd(DATA$`Mean.HD.size`)
preprocessParams2 <- preProcess(DATA, method=c("center","scale"))
processed_data<-predict(preprocessParams2, DATA)
## ONE HOT ENCODING
dmyRTD<-dummyVars(~.,data=processed_data)
dmy_data<-predict(dmyRTD, newdata=processed_data)
dmy_data[is.na(dmy_data)]<--20
dmy_data
#LOAD PACKAGES
library(caret)
library(xgboost)
## R version 3.5.1
## SET WORKING DIRECTORY
#setwd("~/../Dropbox/DOXORUBICIN/NEW PROJECT DOX/DRUG RELEASE DATA/CODE_DOX/code_DOX_1a ") ### you can set your own working directory
setwd("C:/Users/ptsir/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation")
#### FUNCTIONS FOR MODEL STATISTICS
rmse = function(m, o){
sqrt(mean((m - o)^2))
}
## Rsquared FUNCTION (2 DIFFERENT WAYS OF CALCULATION)
Rsquare=function(m,o){
(cov(m,o)/sqrt(var(m)*var(o)))^2
}
R2=function(m,o){
y<-mean(o)
metric1<-(o - m) ^ 2
metric2<- (o-y)^2
s1<-sum(metric1)
s2<-sum(metric2)
ss<-s1/s2
1-s1/s2
}
data<-openxlsx::read.xlsx("hydrodynamic sizes.xlsx", )
data$`Nominal.Size.(nm)` <- as.numeric(data$`Nominal.Size.(nm)`)
data$`Zeta.Potential.(mV)` <- as.numeric(data$`Zeta.Potential.(mV)`)
data$`Anatase.Crystal.(%)` <- as.numeric(data$`Anatase.Crystal.(%)`)
data$pH <- as.numeric(data$pH)
data$Surface.property <- as.factor(data$Surface.property)
select_variables <- !colnames(data) %in% c("Study",  "Doi", "Nanoparticle", "Polydispersity.index.(PDI)",
"Zeta.Potential.(mV)","Electrophoretic.Mobility.(1e-08m^2/s/V)",
"Coating", "Medium.Type", "Rutile.Crystal.(%)",   "Amorphous.crystal.(%)",
"Sonication.power.(W/L)", "Sonication.frequency.(kHz)","TOC.(mg/L)",
"FBS.(%)", "TDS.(mg/L)" )
DATA <- data[,select_variables]
colnames(DATA) <- c("Nominal.Size", "Nominal.SSA", "Mean.HD.size",
"Anatase",
"Surface.property","Aging", "Concentration",
"Conductivity", "IS",
"pH",
"BSA", "Sonication.time",
"Sonication.power")
mean_dr<-mean(DATA$`Mean.HD.size`) ## 0
sd_dr<-sd(DATA$`Mean.HD.size`)
preprocessParams2 <- preProcess(DATA, method=c("center","scale"))
processed_data<-predict(preprocessParams2, DATA)
## ONE HOT ENCODING
dmyRTD<-dummyVars(~.,data=processed_data)
dmy_data<-predict(dmyRTD, newdata=processed_data)
dmy_data[is.na(dmy_data)]<--20
dmy_data <- dmy_data[ , -which(colnames(dmy_data) %in% c("Surface.property.None  "))]
## XGB3A
trainControl<-trainControl(method="repeatedcv", number=10, repeats=3,verboseIter = FALSE,allowParallel = FALSE, savePredictions=TRUE)
tunegrid <- expand.grid(nrounds = 200,
max_depth = 7 ,
eta = 0.10,
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.5
)
set.seed(125)
fitXGB<-train(Mean.HD.size~., data =dmy_data, method="xgbTree", trControl=trainControl ,
tuneGrid=tunegrid , importance=TRUE,verbosity=0)
fitXGB
varImp(fitXGB)
## PREDICTIONS ON TRAIN SET (resubstitution)
predXGB<-predict(fitXGB, newdata=dmy_data)*sd_dr+mean_dr
cor(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
rmse(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
Rsquare(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
R2(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
ggplot(data, mapping=aes(`Mean.Hydrodynamic.size.mean.(nm)`,predXGB, color=predXGB))+
geom_point()+
geom_abline()
dmy_data
dmyRTD<-dummyVars(~.,data=processed_data)
dmy_data<-predict(dmyRTD, newdata=processed_data)
dmy_data[is.na(dmy_data)]<--20
which(colnames(dmy_data) %in% c("Surface.property.None"))
dmy_data <- dmy_data[ , -which(colnames(dmy_data) %in% c("Surface.property.None"))]
## XGB3A
trainControl<-trainControl(method="repeatedcv", number=10, repeats=3,verboseIter = FALSE,allowParallel = FALSE, savePredictions=TRUE)
tunegrid <- expand.grid(nrounds = 200,
max_depth = 7 ,
eta = 0.10,
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.5
)
set.seed(125)
fitXGB<-train(Mean.HD.size~., data =dmy_data, method="xgbTree", trControl=trainControl ,
tuneGrid=tunegrid , importance=TRUE,verbosity=0)
fitXGB
varImp(fitXGB)
## PREDICTIONS ON TRAIN SET (resubstitution)
predXGB<-predict(fitXGB, newdata=dmy_data)*sd_dr+mean_dr
cor(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
rmse(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
Rsquare(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
R2(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
ggplot(data, mapping=aes(`Mean.Hydrodynamic.size.mean.(nm)`,predXGB, color=predXGB))+
geom_point()+
geom_abline()
fitXGB
varImp(fitXGB)
newdata <-  rbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata$Concentration[1:5] = rep(0.1,5)
newdata$Concentration[6:10] = rep(1,5)
newdata$Concentration[11:15] = rep(10,5)
newdata$Concentration[16:20] = rep(50,5)
processed_chen<-predict(preprocessParams2, newdata)
## ONE HOT ENCODING
dmy_chen<-predict(dmyRTD, newdata=processed_chen)
dmy_data[is.na(dmy_data)]<--20
dmy_data <- dmy_data[ , -which(colnames(dmy_data) %in% c("Surface.property.None"))]
predict(fitXGB, newdata=dmy_data)*sd_dr+mean_dr
processed_chen<-predict(preprocessParams2, newdata)
## ONE HOT ENCODING
dmy_chen<-predict(dmyRTD, newdata=processed_chen)
dmy_chen[is.na(dmy_chen)]<--20
dmy_chen <- dmy_chen[ , -which(colnames(dmy_chen) %in% c("Surface.property.None"))]
predict(fitXGB, newdata=dmy_data)*sd_dr+mean_dr
dmy_chen
predict(fitXGB, newdata=dmy_chen)*sd_dr+mean_dr
cbind(predict(fitXGB, newdata=dmy_chen)*sd_dr+mean_dr, newdata$Concentration)
fitXGB
varImp(fitXGB)
cbind(predict(fitXGB, newdata=dmy_chen)*sd_dr+mean_dr, newdata$Concentration)
newdata <-  rbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata$Concentration[1:5] = rep(0.01,5)
newdata$Concentration[6:10] = rep(1,5)
newdata$Concentration[11:15] = rep(10,5)
newdata$Concentration[16:20] = rep(50,5)
processed_chen<-predict(preprocessParams2, newdata)
## ONE HOT ENCODING
dmy_chen<-predict(dmyRTD, newdata=processed_chen)
dmy_chen[is.na(dmy_chen)]<--20
dmy_chen <- dmy_chen[ , -which(colnames(dmy_chen) %in% c("Surface.property.None"))]
cbind(predict(fitXGB, newdata=dmy_chen)*sd_dr+mean_dr, newdata$Concentration)
newdata <-  rbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata$Concentration[1:5] = rep(0.001,5)
newdata$Concentration[6:10] = rep(1,5)
newdata$Concentration[11:15] = rep(10,5)
newdata$Concentration[16:20] = rep(50,5)
processed_chen<-predict(preprocessParams2, newdata)
## ONE HOT ENCODING
dmy_chen<-predict(dmyRTD, newdata=processed_chen)
dmy_chen[is.na(dmy_chen)]<--20
dmy_chen <- dmy_chen[ , -which(colnames(dmy_chen) %in% c("Surface.property.None"))]
cbind(predict(fitXGB, newdata=dmy_chen)*sd_dr+mean_dr, newdata$Concentration)
dim(DATA)
#LOAD PACKAGES
library(caret)
library(xgboost)
## R version 3.5.1
## SET WORKING DIRECTORY
#setwd("~/../Dropbox/DOXORUBICIN/NEW PROJECT DOX/DRUG RELEASE DATA/CODE_DOX/code_DOX_1a ") ### you can set your own working directory
setwd("C:/Users/ptsir/Documents/GitHub/TiO2_aggregation_and_uptake/aggregation")
#### FUNCTIONS FOR MODEL STATISTICS
rmse = function(m, o){
sqrt(mean((m - o)^2))
}
## Rsquared FUNCTION (2 DIFFERENT WAYS OF CALCULATION)
Rsquare=function(m,o){
(cov(m,o)/sqrt(var(m)*var(o)))^2
}
R2=function(m,o){
y<-mean(o)
metric1<-(o - m) ^ 2
metric2<- (o-y)^2
s1<-sum(metric1)
s2<-sum(metric2)
ss<-s1/s2
1-s1/s2
}
data<-openxlsx::read.xlsx("hydrodynamic sizes.xlsx", )
data$`Nominal.Size.(nm)` <- as.numeric(data$`Nominal.Size.(nm)`)
data$`Zeta.Potential.(mV)` <- as.numeric(data$`Zeta.Potential.(mV)`)
data$`Anatase.Crystal.(%)` <- as.numeric(data$`Anatase.Crystal.(%)`)
data$pH <- as.numeric(data$pH)
data$Surface.property <- as.factor(data$Surface.property)
select_variables <- !colnames(data) %in% c("Study",  "Doi", "Nanoparticle", "Polydispersity.index.(PDI)",
"Zeta.Potential.(mV)","Electrophoretic.Mobility.(1e-08m^2/s/V)",
"Coating", "Medium.Type", "Rutile.Crystal.(%)",   "Amorphous.crystal.(%)",
"Sonication.power.(W/L)", "Sonication.frequency.(kHz)","TOC.(mg/L)",
"FBS.(%)", "TDS.(mg/L)" )
DATA <- data[6:746,select_variables]
colnames(DATA) <- c("Nominal.Size", "Nominal.SSA", "Mean.HD.size",
"Anatase",
"Surface.property","Aging", "Concentration",
"Conductivity", "IS",
"pH",
"BSA", "Sonication.time",
"Sonication.power")
mean_dr<-mean(DATA$`Mean.HD.size`) ## 0
sd_dr<-sd(DATA$`Mean.HD.size`)
preprocessParams2 <- preProcess(DATA, method=c("center","scale"))
processed_data<-predict(preprocessParams2, DATA)
## ONE HOT ENCODING
dmyRTD<-dummyVars(~.,data=processed_data)
dmy_data<-predict(dmyRTD, newdata=processed_data)
dmy_data[is.na(dmy_data)]<--20
dmy_data <- dmy_data[ , -which(colnames(dmy_data) %in% c("Surface.property.None"))]
## XGB3A
trainControl<-trainControl(method="repeatedcv", number=10, repeats=3,verboseIter = FALSE,allowParallel = FALSE, savePredictions=TRUE)
tunegrid <- expand.grid(nrounds = 200,
max_depth = 7 ,
eta = 0.10,
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.5
)
set.seed(125)
fitXGB<-train(Mean.HD.size~., data =dmy_data, method="xgbTree", trControl=trainControl ,
tuneGrid=tunegrid , importance=TRUE,verbosity=0)
fitXGB
varImp(fitXGB)
## PREDICTIONS ON TRAIN SET (resubstitution)
predXGB<-predict(fitXGB, newdata=dmy_data)*sd_dr+mean_dr
cor(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
rmse(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
Rsquare(predXGB,data$`Mean.Hydrodynamic.size.mean.(nm)`)
R2(predXGB, data$`Mean.Hydrodynamic.size.mean.(nm)`)
ggplot(data, mapping=aes(`Mean.Hydrodynamic.size.mean.(nm)`,predXGB, color=predXGB))+
geom_point()+
geom_abline()
# Predict Chen data
newdata <-  rbind(DATA[1:5,], DATA[1:5,], DATA[1:5,],DATA[1:5,])
newdata$Concentration[1:5] = rep(0.001,5)
newdata$Concentration[6:10] = rep(1,5)
newdata$Concentration[11:15] = rep(10,5)
newdata$Concentration[16:20] = rep(50,5)
processed_chen<-predict(preprocessParams2, newdata)
## ONE HOT ENCODING
dmy_chen<-predict(dmyRTD, newdata=processed_chen)
dmy_chen[is.na(dmy_chen)]<--20
dmy_chen <- dmy_chen[ , -which(colnames(dmy_chen) %in% c("Surface.property.None"))]
cbind(predict(fitXGB, newdata=dmy_chen)*sd_dr+mean_dr, newdata$Concentration)
DATA <- data[6:746,select_variables]
View(DATA)
