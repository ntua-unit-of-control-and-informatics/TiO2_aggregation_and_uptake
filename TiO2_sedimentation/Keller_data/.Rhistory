silent = TRUE)
# Here we implement a barrier function, thus a solver that can handle
# discontinious functions should be used
rest_comps <- c("C_blood", "C_ht", "C_skin", "C_rob", "C_ki")
rest_comps_low <- solution1[,rest_comps]
rest_comps_high <- solution2[,rest_comps]
threshold <- max(data_10)
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else if(any(rest_comps_low > threshold) | any(rest_comps_high > threshold)){
discrepancy <- 999999999
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
# Remove the outliers from the low concentration data
for (i in 1:dim(Concentrations_low)[2]) {
if(names(data_10)[i] == "Muscle"){
observed_1[[i]] <- data_10[,i][-2]
predicted_1[[i]] <- Concentrations_low[,i][-2] # Remove the 2nd muscle point
}else if(names(data_10)[i] == "Spleen"){
observed_1[[i]] <- data_10[,i][-c(3,4)]
predicted_1[[i]] <- Concentrations_low[,i][-c(3,4)] # remove the 3rd and 4th spleen points
}else{
observed_1[[i]] <- data_10[,i]
predicted_1[[i]] <- Concentrations_low[,i]
}
}
observed_1[[2]][5] <- 1e-05
# Remove the outliers from the high concentration data
for (i in 1:dim(Concentrations_high)[2]) {
if(names(data_100)[i] == "Muscle"){
observed_2[[i]] <- data_100[,i][-c(2,4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(2,4)] # Remove the 2nd and 4th muscle point
}else if(names(data_100)[i] == "Spleen"){
observed_2[[i]] <- data_100[,i][-c(4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(4)] # remove the 4th spleen point
}else{
observed_2[[i]] <- data_100[,i]
predicted_2[[i]] <- Concentrations_high[,i]
}
}
comp_names <- c("Gill","Intestine","Liver",  "Brain","Spleen", "Muscle")
names(predicted_1) <- comp_names
names(predicted_2) <-names(predicted_1)
discrepancy <- (AAFE(predicted_1, observed_1) + AAFE( predicted_2, observed_2))/2
}
return(discrepancy)
}
#=================
#  Prepare input
#=================
inits1 <- create.inits(params_list[[1]],10)
inits2 <- create.inits(params_list[[1]],100)
events1 <- create.events(food_plan,2)
events2 <- create.events(food_plan,3)
sample_time <- sort(c(my_times))#,food_data[,1])) #hours
Time <- c(2,4,6,8,10)*7*24
#==============================
# Nelder - Mead optimization
#==============================
# Grouping by Bachler et al.2014
# 1: brain, heart, skin, muscle, rob -> kup_br_ht_skin_bone
# 2: intestines, kidneys -> kup_int_ki
# 3: liver, sple -> kup_li_spl
# 4: Gills -> kup_gills
# Take the seed
set.seed(seeds)
x0 <- c(log(exp(runif(8, -10, 7))))
names(x0) <- c("kup_1", "kup_2", "kup_3", "kup_4",
"Ku_max", "P_li_bile", "Km",
"kre")
N_iter <- 10
opts <- list( "algorithm" = "NLOPT_LN_NEWUOA", # "NLOPT_LN_SBPLX"
"xtol_rel" = 0.0,
"ftol_rel" = 0.0,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = N_iter)
start_time <- Sys.time()
try(
optimization <- nloptr::nloptr( x0 = x0,
eval_f = obj.func,
lb	= rep(-30, length(x0)),
ub = rep(30, length(x0)),
opts = opts),
silent = TRUE
)
if(!exists("optimization")){
fitness_value <- -100
params <-  c(log(exp(runif(8, -100000, -10000))))
}else{
fitness_value <-  optimization$objective
params <- exp(optimization$solution)
}
end_time <- Sys.time()
duration <- round(end_time-start_time,1)
#####################################################
return(list(seed = seeds, Index_opt = fitness_value,
parameter = params,
duration = duration))
}
seeds <- as.numeric(sample(1:1e+6,4))
library(parallel)
start_time <- Sys.time()
numCores <- detectCores()
cl <- makeCluster(numCores-2)
#clusterExport(cl, c("seeds"))
output <- parLapply(cl, seeds, main_func)
stopCluster(cl)
load("~/GitHub/PBPK_models/Rainbow Trout PBPK/ReModel/3. Fit on Ramsden et al 2009/Both_Concentrations/Rainbow_trout_results_Both_concentrations_Parallel_NLOPTR_PBKOF.RData")
output
load("~/GitHub/PBPK_models/Rainbow Trout PBPK/ReModel/3. Fit on Ramsden et al 2009/Both_Concentrations/Dietary_ReModel_Both_Bounded.RData")
Total_cost <- 10500
init_cost <- 2500
N_doses <- 72
dose_cost <- 166
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost
Total_cost_loan
214*48
214*48 +2100
init_cost <- 2500
N_doses <- 72
dose_cost <- 145
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost_loan
init_cost <- 3500
N_doses <- 72
dose_cost <- 135
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost_loan
init_cost <- 2500
N_doses <- 72
dose_cost <- 155
Total_cost_loan <- init_cost + N_doses*dose_cost
Total_cost_loan
3500+34*233
3500+72*135
3500+72*185
load("~/GitHub/PBPK_models/Rainbow Trout PBPK/CO2_high/Uptake_Linear/Uptake_Linear_ramsden_bioavailability_no_control_no_enterohepatic.RData")
sample_time
inits1
x0
x<-x0
x
x <- exp(x)
x <- as.numeric(x)
x
substance_specific <- c("kup_br"=x[1] ,
"kup_int"=x[2] ,
"kup_rob" = x[2],
"kup_ki" = x[2],
"kup_li"=x[3] ,
"kup_gills"=x[4],
"kup_spl"=x[5] ,
"kup_muscle"=x[6],
"kup_skin" = x[6],
"kup_ht" = x[6],
"P_li_bile"=x[7],
"k_eg" = x[8],
"f_bioav_low" = x[9],
"f_bioav_high" = x[10],
"kup" =  0.002895315 ,
"kre"= 0.232795752)
substance_specific
params <- list()
for (i in 1:length(params_list)) {
params[[i]] <- c(params_list[[i]],substance_specific)
}
params[[1]]
conc <- "low"
solution1 <-  deSolve::ode(times = sample_time,  func = ode.func, y = inits1, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3, conc=conc, food_plan=food_plan)
head(solution1)
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
predicted_1
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
# Remove the data that don't follow a trend from the low concentration data
for (i in 1:dim(Concentrations_low)[2]) {
if(names(data_10)[i] == "Muscle"){
observed_1[[i]] <- data_10[,i][-2]
predicted_1[[i]] <- Concentrations_low[,i][-2] # Remove the 2nd muscle point
}else if(names(data_10)[i] == "Spleen"){
observed_1[[i]] <- data_10[,i][-c(3,4)]
predicted_1[[i]] <- Concentrations_low[,i][-c(3,4)] # remove the 3rd and 4th spleen points
}else{
observed_1[[i]] <- data_10[,i]
predicted_1[[i]] <- Concentrations_low[,i]
}
}
predicted_1
conc <- "low"
try(solution1 <-  deSolve::ode(times = sample_time,  func = ode.func, y = inits1, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3, conc=conc, food_plan=food_plan),
silent = TRUE)
conc <- "high"
try(solution2 <- deSolve::ode(times = sample_time,  func = ode.func, y = inits2, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3, conc=conc, food_plan=food_plan),
silent = TRUE)
if(dim(solution1)[1] != length(sample_time) | dim(solution2)[1] != length(sample_time)){
discrepancy <- Inf
}else{
Concentrations_low <- matrix(NA, nrow = length(Time), ncol = 6)
Concentrations_high <- Concentrations_low
comp_names <- c("C_gills", "C_int", "C_li", "C_br", "C_spl", "C_muscle")
for (i in 1:length(Time)) {
Concentrations_low[i,] <- solution1[which(sample_time==Time[i]),comp_names]
Concentrations_high[i,] <- solution2[which(sample_time==Time[i]),comp_names]
}
colnames(Concentrations_low) <- comp_names
colnames(Concentrations_high) <- comp_names
observed_1 <- list()
observed_2 <- list()
predicted_1 <- list()
predicted_2 <- list()
# Remove the data that don't follow a trend from the low concentration data
for (i in 1:dim(Concentrations_low)[2]) {
if(names(data_10)[i] == "Muscle"){
observed_1[[i]] <- data_10[,i][-2]
predicted_1[[i]] <- Concentrations_low[,i][-2] # Remove the 2nd muscle point
}else if(names(data_10)[i] == "Spleen"){
observed_1[[i]] <- data_10[,i][-c(3,4)]
predicted_1[[i]] <- Concentrations_low[,i][-c(3,4)] # remove the 3rd and 4th spleen points
}else{
observed_1[[i]] <- data_10[,i]
predicted_1[[i]] <- Concentrations_low[,i]
}
}
# Remove the data that don't follow a trend from the high concentration data
for (i in 1:dim(Concentrations_high)[2]) {
if(names(data_100)[i] == "Muscle"){
observed_2[[i]] <- data_100[,i][-c(2,4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(2,4)] # Remove the 2nd and 4th muscle point
}else if(names(data_100)[i] == "Spleen"){
observed_2[[i]] <- data_100[,i][-c(4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(4)] # remove the 4th spleen point
}else{
observed_2[[i]] <- data_100[,i]
predicted_2[[i]] <- Concentrations_high[,i]
}
}
comp_names <- c("Gill","Intestine","Liver",  "Brain","Spleen", "Muscle")
names(predicted_1) <- comp_names
names(predicted_2) <-names(predicted_1)
#discrepancy <- (fitness.metric(observed_1, predicted_1) + fitness.metric(observed_2, predicted_2))/2
discrepancy <- (AAFE(predicted_1, observed_1) + AAFE( predicted_2, observed_2))/2
}
predicted_2
observed_1
21*24
2780/1.24
2521/1.24
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/FPG.RData")
GA_results
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
GA_results <- GA::ga(type = "real", fitness = ga_fitness,
lower = rep(1,16), upper = rep(8.999999,16),
population = "gareal_Population",
selection = "gareal_lsSelection",
crossover = "gareal_laCrossover",
mutation = "gareal_raMutation",
popSize =  60, #the population size.
pcrossover = 0.85, #the probability of crossover between pairs of chromosomes.
pmutation = 0.4, #the probability of mutation in a parent chromosome
elitism = 5, #the number of best fitness individuals to survive at each generation.
maxiter = 200, #the maximum number of iterations to run before the GA search is halted.
run = 50, # the number of consecutive generations without any improvement
#in the best fitness value before the GA is stopped.
keepBest = TRUE, # best solutions at each iteration should be saved in a slot called bestSol.
parallel = (parallel::detectCores()),
monitor =plot,
seed = 8080)
GA_results
22.7/0.599
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_projectseaice.csv")
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
head(sea_ice)
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
sea_ice$year <- as.Date(sea_ice$year)
#Delete unnecessary columns
sea_ice$Source.Data <- NULL
#Change column name to lower case.
sea_ice <- sea_ice %>%
rename_with(tolower)
str(sea_ice)
#Any missing value
sum(sea_ice$missing < 0)
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
library("tidyverse")
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
sea_ice$year <- as.Date(sea_ice$year)
#Delete unnecessary columns
sea_ice$Source.Data <- NULL
#Change column name to lower case.
sea_ice <- sea_ice %>%
rename_with(tolower)
str(sea_ice)
#Any missing value
sum(sea_ice$missing < 0)
head(sea_ice)
sea_ice[which(sea_ice$hemisphere=="north"),]
test <- sea_ice
test <- sea_ice
test[which(test$hemisphere=="north"),][4]
test[which(test$hemisphere=="north"),][4] <- 0
head(test)
test <- sea_ice
test[which(test$hemisphere=="north"),][,4] <- 0
head(test)
test[,hemisphere=="north"]
levels(test)
levels(test$hemisphere)
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
test <- sea_ice
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
head(test,100)
tail(test,100)
levels(test$hemisphere)
test <- sea_ice
levels(test$hemisphere)
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library("tidyverse")
library("ggplot2")
library("plotly")
install.packages("viridis")
library("viridis")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
install.packages("hrbrthemes")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library("hrbrthemes")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test$hemisphere[1,4]
test[1,4]
sea_ice[1,4]
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
tail(test,100)
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
warnings()
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
exp(-2)
log(0.9)
log(-1.5)
exp(-1.5)
setwd("C:/Users/vassi/Documents/GitHub/TiO2_aggregation_and_uptake/TiO2_sedimentation/Keller_data")
load("~/GitHub/TiO2_aggregation_and_uptake/TiO2_sedimentation/Keller_data/keller_results.RData")
optimization_3
colnames(extra_data)
# Transform ksed units from "1/min" to "1/h"
optimization_3$solution*60
optimization_2$solution*60
keller_1
